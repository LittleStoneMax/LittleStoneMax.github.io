[{"content":"基础问题 绝对路径、当前目录、上层目录、主目录分别用什么表示 绝对路径从根目录（/）开始的完整路径 当前目录./ 上层目录../ 主目录~/ pwd\nLinux有哪些文件类型 文件类型 介绍 普通文件 目录文件 设备文件 块设备文件和字符设备文件 链接文件 管道文件 套接字文件 ls命令什么功能，有哪些参数？ 显示指定目录下的所有文件和目录\n-a：显示所有文件及目录（包括以\u0026quot;.\u0026ldquo;开头的隐藏文） -l：以长格式显示文件和目录信息，包括权限、所有者、大小、创建时间等 -r：倒序显示文件和目录 -t：将按照修改时间排序，最新的文件在最前面 -F：在列出的文件名称后加一符号，例如可执行档则加*, 目录则加 \u0026ldquo;/\u0026rdquo; -R：递归显示目录中的所有文件和子目录 复制文件夹命令怎么写？ cp -r递归复制\ncp -r 源文件夹路径目标文件夹路径 什么命令可以对文件内容进行统计？ 在Linux中，可以使用 wc 命令对文件内容进行统计常用以下参数及其功能：\n-l：统计行数； -w：统计单词数； -c：统计字节数； -m：统计字符数。 要统计一个名为 file.txt的文件的行数、单词数和字节数，可以执行以下命令：\nwc -lwc file.txt 查看文件内容的命令有哪些？ cat 命令：这个命令可以将整个文件内容打印到终端。例如，要查看名为\u0026quot;filename\u0026quot;的文件，可以使用 cat filename 命令。\nmore 命令：这个命令能够以分页形式显示文件内容。例如，要查看名为\u0026quot;filename\u0026quot;的文件，可以使用 more filename 命令。\nless 命令：与 more 命令类似，less 命令也能够以分页形式显示文件内容，但同时它还允许用户向上或向下滚动查看文件内容。\nhead 命令：这个命令常用于查看文件的开头几行内容。例如，要查看名为\u0026quot;filename\u0026quot;的文件的前10行，可以使用 head -n 10 filename 命令。\ntail 命令：与 head 命令相对，tail 命令常用于查看文件的最后几行内容，并且会持续刷新，适合实时观察程序的日志情况。例如，要查看名为\u0026quot;filename\u0026quot;的文件的最后10行，可使用 tail -n 10 filename 命令。\n什么是inode和block？ inode是索引节点，用来存储数据属性信息，包含了文件大小、属组、归属的用户组、读写权限、文件类型、修改时间等元信息，同时还具有指向文件实体的指针功能 block是数据块，负责存储实际的数据内容，包括文件的实际文本信息等。\n硬链接和软连接的区别 介绍一下vim 文件权限修改的命令？格式是什么样的？ chmod 命令 数字格式 符号格式\n怎么查看所有进程和指定进程？ 查看所有进程：使用 ps 命令。基本语法是 ps -ef，其中 -e 选项表示显示所有进程，-f 选项表示显示完整格式的输出 查看指定进程：可以使用 ps 命令结合进程ID（PID）来查看指定进程。基本语法是 ps -p PID -ef，其中 -p PID 选项表示只显示指定PID的进程 top命令：可以实时地显示系统中各个进程的资源占用情况，包括CPU、内存等\n终止进程的命令？ kill 命令：可以向指定进程发送信号，从而终止进程 基本语法是 kill [信号] 进程ID 可以使用 kill -9 进程ID 来强制终止进程。 pkill 命令：可以根据进程名或进程所属的用户和组名来终止进程。基本语法是 pkill [选项] 进程名 可以使用 pkill firefox 来终止所有名为firefox的进程。 killall 命令：可以根据进程名来终止进程。基本语法是 killall 进程名。例如，你可以使用 killall firefox 来终止所有名为firefox的进程。 sigterm 命令：可以向指定进程发送SIGTERM信号，从而请求进程终止。基本语法是 sigterm进程ID 可以使用 sigterm 12345 来请求PID为12345的进程终止。 搜索文件的命令是什么？可以加什么选项？ find 命令：用于查找文件，它可以根据文件名、inode号等进行搜索 基本的语法是 find [路径] [选项] [表达式] find /path -type f -iname filename 会搜索指定路径下所有类型为普通文件并且文件名为filename的文件。\nfind /path -type f -iname filename 会搜索指定路径下所有类型为普通文件并且文件名为filename的文件。 查看磁盘使用空间的命令？ 在Linux系统中，可以使用以下命令查看磁盘使用空间：\ndf 命令：可以显示文件系统的总容量、已用空间、可用空间和挂载点等信息。 du 命令：可以显示指定目录或文件的占用空间大小。 lsblk 命令：可以列出所有可用块设备的信息，包括磁盘、分区等。 mount 命令：可以显示当前系统已经挂载的文件系统列表。 fdisk -l 命令：可以列出所有可用的磁盘和分区信息。 查看ip地址和接口信息的命令？ 查看IP地址：ifconfig 或 ip addr 查看接口信息：ifconfig 或 ip link\ngcc编译分哪几个步骤？ GCC编译过程主要包含以下四个步骤：\n预处理：这一阶段将源文件中的预处理指令进行处理，比如包含其他文件的头文件或者定义宏等。经过处理后，会生成一个预编译文件 编译：预编译之后，编译器将处理源代码，将其转换为汇编语言。这个阶段会生成对应的汇编代码。 汇编：汇编器将上一步得到的汇编代码转换为二进制目标文件。每一个源文件会被转换成一个单独的目标文件（.O文件） 链接：最后链接器将多个目标文件以及所需的库文件进行链接，生成最终可执行文件 动态链接库和静态链接库的区别？ MakeFile的两个常用函数和三个自动变量 Makefile中的两个常用函数是 addprefix 和 patsubst，以及三个自动变量：$(MAKEFILE_LIST)、$(wildcard) 和 $(foreach)。\naddprefix 函数用于给目标文件名添加前缀。语法：$(addprefix prefix, target)。例如： %.o: %.c gcc -c $(addprefix build/, $\u0026lt;) 这个规则表示将 .c 文件编译成 .o 文件，并使用 build/ 作为前缀。\npatsubst 函数用于替换字符串中的匹配项。语法：$(patsubst pattern, replacement, string)。例如： OBJECTS := main.o foo.o bar.o main.o: main.c gcc -c $(patsubst %.c, %.o, $\u0026lt;) 这个规则表示将 main.c 编译成 main.o，并将所有的 .c 替换为 .o。\n自动变量： $(MAKEFILE_LIST)：包含当前Makefile的文件列表。 $(wildcard)：匹配指定模式的文件列表。 $(foreach)：遍历一个列表并对每个元素执行指定的命令。 GDB有哪些指令？ GDB（GNU调试器）是一个功能强大的调试工具，它支持多种编程语言和处理器架构。以下是一些常用的GDB指令：\nbreak：设置断点。例如break main 在main函数处设置断点 run：启动程序。例如run 运行当前被调试的程序 next：执行下一行代码，但不进入函数。例如next 执行下一行代码 step：执行下一行代码，如果遇到函数调用，则进入函数内部。例如step 执行下一行代码并进入函数 continue：继续执行程序，直到遇到下一个断点或程序结束。例如continue 继续执行程序 print：打印变量的值。例如print x 打印变量x的值 watch：监视表达式的值变化。例如watch x 监视变量x的值变化 info locals：显示当前作用域内的局部变量信息。例如info locals 显示当前作用域内的局部变量信息 info args：显示当前函数的参数信息。例如info args 显示当前函数参数信息 backtrace：显示当前的栈帧信息。例如backtrace 显示当前的栈帧信息。 frame：切换到指定的栈帧。例如frame 2 切换到第2个栈帧。 list：显示当前源文件的部分或全部代码。例如list main.c:5-10 显示main.c文件的第5行到第10行代码。 source：加载指定的源文件并执行。例如source file.c 加载file.c文件并执行。 delete breakpoint：删除指定的断点。例如：delete 1 删除编号为1的断点。 help：查看GDB的帮助文档。例如help breakpoint 查看关于断点的帮助文档 如何在Linux系统中查看TCP状态 TCP的连接状态查看，在Linux中可以用netstat -napt查看 ![[Pasted image 20231226183740.png]]\n-a:列出所有端口 -at:列出所有TCP端口 -au:列出所有UDP端口 -p:显示正在使用Socket的程序识别码和程序名称 -n:显示IP地址和端口号的数字格式，不进行反向解析 top 在Linux系统中，top命令是常用的分析性能的工具，能够实时监控系统中各个进程资源占用的情况，类似于windows中任务管理器\necho echo会将输入的字符串送往标准输出\nps ","permalink":"https://xyming108.github.io/posts/tech/linux%E5%85%A5%E9%97%A8/","summary":"基础问题 绝对路径、当前目录、上层目录、主目录分别用什么表示 绝对路径从根目录（/）开始的完整路径 当前目录./ 上层目录../ 主目录~/ pwd Linux有哪些文件类型 文件类型 介绍 普通文件 目录文件 设备文件 块设备文件和字符设备文件 链接文件 管道文件 套接字文件 ls命令什么功能，有哪些参数？ 显示指定","title":"Linux入门"},{"content":"1. 介绍 scan命令的作用和keys *的作用类似，主要用于查找redis中的键，但是在正式的生产环境中一般不会直接使用keys *这个命令，因为他会返回所有的键，如果键的数量很多会导致查询时间很长，进而导致服务器阻塞，所以需要scan来进行更细致的查找\nscan总共有这几种命令：scan、sscan、hscan、zscan，分别用于迭代数据库中的：数据库中所有键、集合键、哈希键、有序集合键，命令具体结构如下：\nscan cursor [MATCH pattern] [COUNT count] [TYPE type] sscan key cursor [MATCH pattern] [COUNT count] hscan key cursor [MATCH pattern] [COUNT count] zscan key cursor [MATCH pattern] [COUNT count] 2. scan scan cursor [MATCH pattern] [COUNT count] [TYPE type]，cursor表示游标，指查询开始的位置，count默认为10，查询完后会返回下一个开始的游标，当返回0的时候表示所有键查询完了\n127.0.0.1:6379[2]\u0026gt; scan 0 1) \u0026#34;3\u0026#34; 2) 1) \u0026#34;mystring\u0026#34; 2) \u0026#34;myzadd\u0026#34; 3) \u0026#34;myhset\u0026#34; 4) \u0026#34;mylist\u0026#34; 5) \u0026#34;myset2\u0026#34; 6) \u0026#34;myset1\u0026#34; 7) \u0026#34;mystring1\u0026#34; 8) \u0026#34;mystring3\u0026#34; 9) \u0026#34;mystring4\u0026#34; 10) \u0026#34;myset\u0026#34; 127.0.0.1:6379[2]\u0026gt; scan 3 1) \u0026#34;0\u0026#34; 2) 1) \u0026#34;myzadd1\u0026#34; 2) \u0026#34;mystring2\u0026#34; 3) \u0026#34;mylist2\u0026#34; 4) \u0026#34;myhset1\u0026#34; 5) \u0026#34;mylist1\u0026#34; MATCH可以采用模糊匹配找出自己想要查找的键，这里的逻辑是先查出20个，再匹配，而不是先匹配再查询，这里加上count 20是因为默认查出的10个数中可能不能包含所有的相关项，所以把范围扩大到查20个，我这里测试的键总共有15个\n127.0.0.1:6379[2]\u0026gt; scan 0 match mylist* count 20 1) \u0026#34;0\u0026#34; 2) 1) \u0026#34;mylist\u0026#34; 2) \u0026#34;mylist2\u0026#34; 3) \u0026#34;mylist1\u0026#34; TYPE可以根据具体的结构类型来匹配该类型的键\n127.0.0.1:6379[2]\u0026gt; scan 0 count 20 type list 1) \u0026#34;0\u0026#34; 2) 1) \u0026#34;mylist\u0026#34; 2) \u0026#34;mylist2\u0026#34; 3) \u0026#34;mylist1\u0026#34; 3. sscan sscan key cursor [MATCH pattern] [COUNT count]，sscan的第一个参数总是集合类型的key\n127.0.0.1:6379[2]\u0026gt; sadd myset1 a b c d (integer) 4 127.0.0.1:6379[2]\u0026gt; smembers myset1 1) \u0026#34;d\u0026#34; 2) \u0026#34;a\u0026#34; 3) \u0026#34;c\u0026#34; 4) \u0026#34;b\u0026#34; 127.0.0.1:6379[2]\u0026gt; sscan myset1 0 1) \u0026#34;0\u0026#34; 2) 1) \u0026#34;d\u0026#34; 2) \u0026#34;c\u0026#34; 3) \u0026#34;b\u0026#34; 4) \u0026#34;a\u0026#34; 127.0.0.1:6379[2]\u0026gt; sscan myset1 0 match a 1) \u0026#34;0\u0026#34; 2) 1) \u0026#34;a\u0026#34; 4. hscan hscan key cursor [MATCH pattern] [COUNT count]，sscan的第一个参数总是哈希类型的key\n127.0.0.1:6379[2]\u0026gt; hset myhset1 kk1 vv1 kk2 vv2 kk3 vv3 (integer) 3 127.0.0.1:6379[2]\u0026gt; hgetall myhset1 1) \u0026#34;kk1\u0026#34; 2) \u0026#34;vv1\u0026#34; 3) \u0026#34;kk2\u0026#34; 4) \u0026#34;vv2\u0026#34; 5) \u0026#34;kk3\u0026#34; 6) \u0026#34;vv3\u0026#34; 127.0.0.1:6379[2]\u0026gt; hscan myhset1 0 1) \u0026#34;0\u0026#34; 2) 1) \u0026#34;kk1\u0026#34; 2) \u0026#34;vv1\u0026#34; 3) \u0026#34;kk2\u0026#34; 4) \u0026#34;vv2\u0026#34; 5) \u0026#34;kk3\u0026#34; 6) \u0026#34;vv3\u0026#34; 5. zscan zscan key cursor [MATCH pattern] [COUNT count]，sscan的第一个参数总是有序集合类型的key\n127.0.0.1:6379[2]\u0026gt; zadd myzadd1 1 zz1 2 zz2 3 zz3 (integer) 3 127.0.0.1:6379[2]\u0026gt; zrange myzadd1 0 -1 withscores 1) \u0026#34;zz1\u0026#34; 2) \u0026#34;1\u0026#34; 3) \u0026#34;zz2\u0026#34; 4) \u0026#34;2\u0026#34; 5) \u0026#34;zz3\u0026#34; 6) \u0026#34;3\u0026#34; 127.0.0.1:6379[2]\u0026gt; zscan myzadd1 0 1) \u0026#34;0\u0026#34; 2) 1) \u0026#34;zz1\u0026#34; 2) \u0026#34;1\u0026#34; 3) \u0026#34;zz2\u0026#34; 4) \u0026#34;2\u0026#34; 5) \u0026#34;zz3\u0026#34; 6) \u0026#34;3\u0026#34; ","permalink":"https://xyming108.github.io/posts/tech/tech1/","summary":"1. 介绍 scan命令的作用和keys *的作用类似，主要用于查找redis中的键，但是在正式的生产环境中一般不会直接使用keys *这个命令，因为他会返回所有的键，如果键的数量很多会导致查询时间很长，进而导致服务器阻塞，所以需要scan来进行更细致的查找 scan总共有这几种命令：sca","title":"Redis scan命令学习"},{"content":"","permalink":"https://xyming108.github.io/posts/blog/blog/","summary":"","title":"Blog"},{"content":"","permalink":"https://xyming108.github.io/posts/life/life/","summary":"","title":"Life"},{"content":"","permalink":"https://xyming108.github.io/posts/read/read/","summary":"","title":"Read"},{"content":"\u0026lt;div\u0026gt; 科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 \u0026lt;/div\u0026gt; ","permalink":"https://xyming108.github.io/posts/tech/tech/","summary":"\u0026lt;div\u0026gt; 科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代","title":"Tech"},{"content":"\rSulv\u0026#39;s Blog\r一个记录技术、阅读、生活的博客\r👉友链格式\r名称： Sulv\u0026rsquo;s Blog 网址： https://www.sulvblog.cn 图标： https://www.sulvblog.cn/img/Q.gif 描述： 一个记录技术、阅读、生活的博客 👉友链申请要求\r秉承互换友链原则、文章定期更新、不能有太多广告、个人描述字数控制在15字内\n👉Hugo博客交流群\r787018782\n","permalink":"https://xyming108.github.io/links/","summary":"Sulv\u0026#39;s Blog 一个记录技术、阅读、生活的博客 👉友链格式 名称： Sulv\u0026rsquo;s Blog 网址： https://www.sulvblog.cn 图标： https://www.sulvblog.cn/img/Q.gif 描述： 一个记录技术、阅读、生活的博客 👉友链申请要求 秉承互换友链原则、文章定期更新、不能有太多广告、个人描述字数控制在15字内 👉Hugo博客交流群 787018782","title":"🤝友链"},{"content":"关于我\n英文名: Kevin Xu 职业: 程序员 运动: 跑步、乒乓球、爬山 ","permalink":"https://xyming108.github.io/about/","summary":"关于我 英文名: Kevin Xu 职业: 程序员 运动: 跑步、乒乓球、爬山","title":"🙋🏻‍♂️关于"}]